package main

import "fmt"

// 题目描述

// 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。

// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// 说明:

// 为什么返回数值是整数，但输出的答案是数组呢?

// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

// 你可以想象内部操作如下:

// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
// int len = removeDuplicates(nums);

// // 在函数里修改输入数组对于调用者是可见的。
// // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
// for (int i = 0; i < len; i++) {
//     print(nums[i]);
// }

// 示例 1：

// 输入：nums = [1,1,2]
// 输出：2, nums = [1,2]
// 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。

// 示例 2：

// 输入：nums = [0,0,1,1,1,2,2,3,3,4]
// 输出：5, nums = [0,1,2,3,4]
// 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。

// 提示：

//     0 <= nums.length <= 3 * 104
//     -104 <= nums[i] <= 104
//     nums 已按升序排列

func duplicate(nums []int) int {
	cnt := 0 //记录重复元素的数目
	for i := 1; i < len(nums); i++ {
		if nums[i] == nums[i-1] {
			cnt++
		} else {
			nums[i-cnt] = nums[i]
		}
		fmt.Println("duplicate:", cnt, i, nums)
	}
	return (len(nums) - cnt)
}

// 题目描述

// 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。

// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// 说明：

// 为什么返回数值是整数，但输出的答案是数组呢？

// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

// 你可以想象内部操作如下:

// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
// int len = removeDuplicates(nums);

// // 在函数里修改输入数组对于调用者是可见的。
// // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
// for (int i = 0; i < len; i++) {
//     print(nums[i]);
// }

// 示例 1：

// 输入：nums = [1,1,1,2,2,3]
// 输出：5, nums = [1,1,2,2,3]
// 解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。

// 示例 2：

// 输入：nums = [0,0,1,1,1,1,2,3,3]
// 输出：7, nums = [0,0,1,1,2,3,3]
// 解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。

// 提示：

//     1 <= nums.length <= 3 * 104
//     -104 <= nums[i] <= 104
//     nums 已按升序排列

// 解法

// 从数组下标 1 开始遍历数组。

// 用计数器 cnt 记录当前数字重复出现的次数，cnt 的最小计数为 0；用 cur 记录新数组下个待覆盖的元素位置。

// 遍历时，若当前元素 nums[i] 与上个元素 nums[i-1] 相同，则计数器 +1，否则计数器重置为 0。如果计数器小于 2，说明当前元素 nums[i] 可以添加到新数组中，即：nums[cur] = nums[i]，同时 cur++。

// 遍历结果，返回 cur 值即可。
func duplicate_2(nums []int) int {
	cnt, cur := 0, 1
	for i := 1; i < len(nums); i++ {
		if nums[i] == nums[i-1] {
			cnt++
		} else {
			cnt = 0
		}
		if cnt < 2 {
			nums[cur] = nums[i]
			cur++
		}
		fmt.Println("duplicate_2:", i, cnt, cur, nums)
	}
	return cur
}

func duplicate_3(nums []int) int {
	cnt := 0
	for _, num := range nums {
		if cnt < 2 || num != nums[cnt-2] {
			nums[cnt] = num
			cnt++
		}
	}
}
func main() {
	nums := []int{0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 5}
	nums2 := []int{0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 5}
	duplicate(nums)
	duplicate_2(nums2)
}
